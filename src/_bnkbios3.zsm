; Copyright (C) 2024 Robin Sergeant
;
; banked bios

OUTC		EQU 1
MSG		EQU 23
CHAN		EQU 24
KBDTL		EQU 31
KBDW		EQU 33
WIDTH		EQU 52
INISYS		EQU 64
RDSECL		EQU 68
WRSECL		EQU 69
FLUSH		EQU 71
RDINFO		EQU 72

CCP_LEN		EQU 25
CCP_SIZE	EQU CCP_LEN * 128
PORT1_MASK	EQU 0FF01H
PORT0		EQU 018H
PORT1		EQU 019H

		EXTERNAL @civec,@covec,@mxtpa

		CSEG

		ORG 0

		JP boot		; initial entry on cold start
wboot_entry:	JP wboot	; reentry on program exit, warm start

		JP const	; return console input status
		JP conin	; return console input character
		JP conout	; send console output character
		JP list		; send list output character
		JP auxout	; send auxilliary output character
		JP auxin	; return auxilliary input character

		JP home		; set disks to logical home
		JP seldsk	; select disk drive, return disk parameter info
		JP settrk	; set disk track
		JP setsec	; set disk sector
		JP setdma	; set disk I/O memory address
		JP read		; read physical block(s)
		JP write	; write physical block(s)

		JP listst	; return list device status
		JP sectrn	; translate logical to physical sector

		JP conost	; return console output status
		JP auxist	; return aux input status
		JP auxost	; return aux output status
		JP devtbl	; return address of device def table
		JP cinit	; change baud rate of device

		JP getdrv	; return address of disk drive table
		JP multio	; set multiple record count for disk I/O
		JP flushdsk	; flush BIOS maintained disk caching

		JP move		; block move memory to memory
		JP time		; Signal Time and Date operation
		JP bnksel	; select bank for code execution and default DMA
		JP setbnk	; select different bank for disk I/O DMA operations.
		JP xmove	; set source and destination banks for one operation

		JP 0		; reserved for future expansion
		JP 0		; reserved for future expansion
		JP 0		; reserved for future expansion

		DSEG

boot:		LD SP,bios_stack
		CALL init_page0

		LD HL,8000H		; setup device vectors
		LD (@covec),HL
		LD (@civec),HL

		DI
		LD BC,PORT0		; map RAM bank 5 to 0000H
		LD A,5
		OUT (C),A

		LD DE,0800H		; copy banked portion of BDOS+BIOS to system block
		LD HL,4800H
		LD BC,3800H
		LDIR

		LD C,PORT0		; map RAM bank 6 to 0000H
		INC A
		OUT (C),A

		LD DE,0000H		; look for ram disk label
		LD HL,m_label
		LD B,12
1$:		LD A,(DE)
		CP (HL)
		JR NZ,init_rdisk
		INC E
		INC HL
		DEC B
		DJNZ 1$
		JR init_rdisk_ok	; assume initialised if present
		
init_rdisk:	LD E,0			; copy RAM disk label
		LD HL,m_label
		LD BC,33		; size of label extent + init byte
		LDIR

		LD HL,0020H		; clear remainder of RAM disk directory
		LD BC,2015
		LDIR

init_rdisk_ok:	LD C,PORT0		; map RAM bank 1 back to 0000H
		LD A,1
		OUT (C),A
		EI

		LD HL,sign_on
		EMT MSG

		CALL load_ccp
		LD (checksum),HL
		JP Z,start_ccp

		LD HL,ccp_err_msg
		EMT MSG
		DI
		HALT			; nothing more we can do

		CSEG

wboot:		LD SP,bios_stack
		LD A,1			; make sure we are in bank 1
		CALL bnksel
		CALL init_page0

		LD IX,inisys_byte	; re-initialize IDC buffers
		EMT INISYS

		LD A,1			; set 80 column mode in case changed
		EMT WIDTH

		LD C,PORT1		; select Page 3 (all RAM)
		LD A,(PORT1_MASK)
		OR 3
		DI			; disable interrupts while
		OUT (C),A		; ROM is unavailable

		LD HL,0			; checksum registers
		LD D,0
		EXX
		LD DE,0100H		; copy CCP back to TPA
		LD HL,0E800H
		LD BC,CCP_SIZE
1$:		LD A,(HL)
		EXX
		LD E,A
		ADD HL,DE		; generate checksum
		EXX
		LDI
		JP PE,1$
		EXX

		LD A,(PORT1_MASK)	; return to Page 1
		OUT (C),A
		EI			; re-enable interrupts

		CALL verify_cs
		JR NZ,reload		; only start CCP if checksum ok

start_ccp:	LD HL,cursor_keys	; re-configure cursor keys
		EMT MSG
		JP 0100H		; start CCP

reload:		CALL load_ccp		; else reload
		JR NZ,reload_error
		CALL verify_cs
		JR Z,start_ccp
reload_error:	LD HL,reload_msg
		EMT MSG
		EMT KBDW
		LD IX,inisys_byte	; re-initialize IDC buffers
		EMT INISYS
		JR reload

init_page0:	LD A,0C3H
		LD HL,wboot_entry
		LD (0000H),A
		LD (0001H),HL

		LD HL,(@mxtpa)
		LD (0005H),A
		LD (0006H),HL
		RET

load_ccp:	LD IX,unit		; load CCP from track 2 of A:
		LD (IX+0),0
		LD (IX+1),2
		LD (IX+2),1
		LD HL,0100H
		LD (address),HL

		CALL get_discinfo	; set density for disc
		RET NZ
		LD (unit),A

		LD HL,(address)
		LD DE,128
		LD B,CCP_LEN

read_loop:	EMT RDSECL
		RET NZ
		INC (IX+2)		; increase sector no.
		ADD HL,DE		; advance buffer
		LD (address),HL
		DJNZ read_loop

		LD C,PORT1		; select Page 3 (all RAM)
		LD A,(PORT1_MASK)
		OR 3
		DI			; disable interrupts while
		OUT (C),A		; ROM is unavailable

		LD HL,0			; checksum registers
		LD D,0
		EXX
		LD DE,0E800H		; copy CCP to hidden area
		LD HL,0100H		; of RAM (behind ROM) so
		LD BC,CCP_SIZE		; we can quickly copy it back
1$:		LD A,(HL)		; during a warm boot
		EXX
		LD E,A
		ADD HL,DE		; generate checksum
		EXX
		LDI
		JP PE,1$
		EXX
		CP A			; set zero flag for success

		LD A,(PORT1_MASK)	; return to Page 1
		OUT (C),A
		EI			; re-enable interrupts
		RET			; HL contains checksum value

verify_cs:	EX DE,HL
		LD HL,checksum
		LD A,E
		CP (HL)
		RET NZ
		INC HL
		LD A,D
		CP (HL)
		RET

const:		LD (saved_sp),SP
		LD SP,bios_stack
		PUSH BC
		LD C,KBDTL
		CALL safe_emt
		POP BC
		LD SP,(saved_sp)
		RET

conin:		LD (saved_sp),SP
		LD SP,bios_stack
		PUSH BC
		LD C,KBDW
		CALL safe_emt
		POP BC
		LD SP,(saved_sp)
		RET

conout:		LD (saved_sp),SP
		LD SP,bios_stack
		PUSH BC
		PUSH AF
		LD A,C
		LD C,OUTC
		CALL safe_emt
		POP AF
		POP BC
		LD SP,(saved_sp)
		RET

conost:		LD A,0FFH
		RET

		DSEG

home:		LD IX,unit
		LD (IX+1),0
		RET

seldsk:		LD (saved_sp),SP
		LD SP,bios_stack
		PUSH AF
		LD IX,unit
		LD (IX+0),C
		LD HL,dph12		; for ram disk
		LD A,12			; when M: selected
		CP C
		JR Z,seldsk_ret
		PUSH BC
		LD B,0			; find DPH
		SLA C			; multiply C by 2 to give table index
		LD IY,drive_table
		ADD IY,BC
		LD H,(IY+1)
		LD L,(IY+0)
		PUSH HL
		POP IY			; IY now contains address of DPH
		SRL C
		LD HL,drive_info
		ADD HL,BC		; HL contains location for stored unit byte
		BIT 0,E
		JR Z,read_info		; Read disc info when bit 0 unset
		POP BC
		LD A,(HL)		; else reuse data previously found for drive
		JR set_unit
read_info:	CALL get_discinfo
		POP BC
		JR Z,rdinfo_ok
		LD HL,0			; return null DPH on error
		JR seldsk_ret
rdinfo_ok:	OR C			; add drive number to unit
		LD (HL),A		; store in drive info table
		LD HL,dpb_sd
		BIT 5,A
		JR Z,set_dpd		; use SD when bit 5 clear
		LD HL,dpb_dd
		BIT 6,A
		JR Z,set_dpd		; use DD when bit 6 clear
		LD HL,dpb_qd		; else use QD
set_dpd:	LD (IY+12),L
		LD (IY+13),H
set_unit:	LD (unit),A
		PUSH IY			; transfer DPH to HL
		POP HL
seldsk_ret:	POP AF
		LD SP,(saved_sp)
		RET

get_discinfo:	LD C,RDINFO
		CALL safe_emt
		RET NZ			; exit on error
		AND 00000110B		; keep data and track density
		RLCA			; shift to bits 5 and 6 to
		RLCA			; form drive unit byte
		RLCA
		RLCA
		CP A			; set zero flag (success)
		RET

settrk:		LD IX,unit
		LD (IX+1),C
		RET

setsec:		LD IX,unit
		LD (IX+2),C
		RET

setdma:		LD (address),BC
		LD (buffer_addr),BC
		RET

setbnk:		LD (dma_bank),A
		RET

sectrn:		LD HL,unit
		BIT 3,(HL)
		JR Z,1$
		LD H,B			; no change for ram disk
		LD L,C
		RET
1$:		BIT 5,(HL)
		JR Z,translate		; translate for SD only
		LD H,B
		LD L,C
		INC L			; otherwise just adjust to start from 1
		RET
translate:	LD HL,xlt
		ADD HL,BC
		LD L,(HL)
		LD H,B			; B will always be zero as < 255 sectors
		RET

getdrv:		LD HL,drive_table
		RET

read:		LD IX,unit
		BIT 3,(IX+0)
		JP NZ,rdisk_read	; ram disk
		LD (saved_sp),SP
		LD SP,bios_stack
		PUSH BC
		PUSH HL
		LD C,RDSECL
		LD A,(dma_bank)
		OR A
		JR NZ,read_no_cpy	; not bank 0, can read directly into dest
		LD HL,common_buffer	; otherwise use common buffer
		LD (address),HL
		CALL safe_emt
		JR NZ,read_done		; skip buffer copy on failure
		PUSH DE
		LD DE,(buffer_addr)
		LD BC,128
		LDIR			; copy buffer to dest
		POP DE
		JR read_done
read_no_cpy:	CALL safe_emt
read_done:	LD A,0
		JR Z,read_ret		; return 0 for success
		CALL get_discinfo
		JR NZ,read_fail
		LD HL,unit
		XOR (HL)		; xor to see if density has changed
		AND 11111000B		; (ignoring drive number)
		LD A,0FFH
		JR NZ,read_ret		; return FF when media changed
read_fail:	LD A,1			; else return 1 for failure
read_ret:	POP HL
		POP BC
		LD SP,(saved_sp)
		RET

flushdsk:	LD (saved_sp),SP
		LD SP,bios_stack
		PUSH BC
		LD IX,unit
		BIT 3,(IX+0)
		JR NZ,flush_ok		; ram disk does not need flushing
do_flush:	LD C,FLUSH
		CALL safe_emt
		JR Z,flush_ok
		BIT 6,A
		LD A,1			; return 1 for general failure
		JR Z,flush_ret		; (write protect bit not set)
		JR C,flush_ret		; (IDC protocol error)
		INC A
		JR flush_ret		; return 2 if disc write protected
flush_ok:	XOR A
flush_ret:	POP BC
		LD SP,(saved_sp)
		RET			; return 0 on sucess

write:		LD IX,unit
		BIT 3,(IX+0)
		JP NZ,rdisk_write	; ram disk
		LD (saved_sp),SP
		LD SP,bios_stack
		LD A,(dma_bank)
		OR A
		JR NZ,do_write		; not bank 0, no need to copy buffer
		EXX
		LD DE,common_buffer
		LD HL,(address)
		LD BC,128
		LD (address),DE
		LDIR			; copy buffer to common area
		EXX
do_write:	PUSH BC
		LD C,WRSECL
		CALL safe_emt
		JR Z,write_ok
		JR C,write_fail		; (IDC protocol error)
		BIT 6,A
		JR NZ,write_protect	; (write protect bit set)
		CALL get_discinfo
		JR NZ,write_fail
		EXX			; preserve HL
		LD HL,unit
		XOR (HL)		; xor to see if density has changed
		EXX
		AND 11111000B		; (ignoring drive number)
		LD A,0FFH		; return FF when media changed
		JR NZ,write_ret
write_fail:	LD A,1			; return 1 for general failure
		JR write_ret
write_protect:	LD A,2			; return 2 if disc write protected
		JR write_ret
write_ok:	LD A,(track)
		CP 3			; always flush after directory track update
		JR Z,do_flush		; (hack to prevent data loss)
		XOR A
write_ret:	POP BC
		LD SP,(saved_sp)
		RET			; return 0 on sucess

rdisk_read:	LD A,0EBH		; opcode for EX DE,HL
		JR rdisk_copy

rdisk_write:	XOR A			; opcode for NOP
		JR rdisk_copy

rdisk_copy:	EXX
		LD (rdisk_op),A		; self modifying code

		LD C,PORT1		; select Page 3 (all RAM)
		LD A,(PORT1_MASK)
		OR 3
		OUT (C),A

		LD BC,PORT0		; map track block to 0x0000
		LD A,(track)
		OUT (C),A

		LD HL,8000H		; set HL to start of data block
		LD DE,(address)
		LD A,D
		AND 00111111B
		LD D,A			; convert address to offset
		ADD HL,DE		; then add to find start of data

		LD A,(sector)		; set DE to address of sector
		LD D,A
		LD E,0
		SRL D			; divide sector by 2 to find page number
		RR E			; use remainder to index page (0x00 or 0x80)

		LD A,(dma_bank)
		OR A
		LD A,4
		JR Z,1$			; dma_bank 0 so copy from block 4

		LD A,(address+1)	; else find block to copy
		RLCA			; 2 most significant bits give
		RLCA			; a 16K block index
		AND 3
		INC A			; blocks are mapped as 1,2,3,0
		AND 3

1$:		LD BC,0200H + PORT0	; map block to copy to 0x8000
		OUT (C),A
		INC A
		CP 4
		JR NZ,2$
		XOR A			; block 0 follows block 3
2$:		INC B
		OUT (C),A

		LD BC,128		; copy a whole sector
rdisk_op:	EX DE,HL
		LDIR

		LD C,PORT0		; restore memory layout
		LD A,4
		OUT (C),A

		LD BC,0200H + PORT0
		LD A,3
		OUT (C),A
		INC B
		XOR A			; block 0 follows block 3
		OUT (C),A

		LD C,PORT1		; return to Page 1
		LD A,(PORT1_MASK)
		OUT (C),A

		EXX
		XOR A			; return 0 for success
		RET

		CSEG

devtbl:		LD HL,chrtbl
		RET

move:		EX DE,HL
		LDIR
		EX DE,HL
		RET

bnksel:		LD (current_bank),A
switch_bnk:	OR A
		JR NZ,sel_bank1
sel_bank0:	LD A,4			; bank 0 maps to blocks 4 and 5
		DI			; disable interrupts while in bank 0
		EXX			; preserve BC
		LD BC,PORT0
		OUT (C),A
		INC B			; increment B to map region 0x4000H to 0x8000H
		INC A			; increment A to select block 5
		OUT (C),A
		EXX			; restore BC
		RET
sel_bank1:	EXX			; bank 1 maps to blocks 1 and 2
		LD BC,PORT0
		OUT (C),A
		INC B			; increment B to map region 0x4000H to 0x8000H
		INC A			; increment A to select block 2
		OUT (C),A
		EXX
		EI			; enable interrupts again in bank 1

not_supported:
list:
auxout:
auxin:
listst:
auxist:
auxost:
cinit:
multio:
time:
xmove:		RET

safe_emt:	PUSH AF
		LD A,(current_bank)
		OR A
		JR NZ,quick_emt		; no need to switch if current bank is 1
		INC A			; switch to bank 1
		CALL switch_bnk
		POP AF
		EMT CHAN
		PUSH AF
		XOR A			; switch back to bank 0 after call
		CALL switch_bnk
		POP AF
		RET

quick_emt:	POP AF
		EMT CHAN
		RET

cursor_keys:	DEFB 27,37,65,1,23	; UP = Ctrl+W
		DEFB 27,37,68,1,1	; LEFT = Ctrl+A
		DEFB 27,37,66,1,6	; RIGHT = Ctrl+F
		DEFB -1

chrtbl:		DEFM 'TERM  '
		DEFB 00000011B
		DEFB 0
		DEFB 0

drive_table:	DEFW dph0,dph1,dph2,dph3	; floppy drives
		DEFW 0,0,0,0,0,0,0,0
		DEFW dph12			; RAM disk
		DEFW 0,0,0

dph0:		DEFW 0			; XLT
		DEFB 0,0,0,0,0,0,0,0,0	; scratch area
		DEFB 0			; MF
		DEFW dpb_qd		; DPB
		DEFW 0FFFEH		; CSV (generated by GENCPM)
		DEFW 0FFFEH		; ALV (generated by GENCPM)
		DEFW 0FFFEH		; DIRBCB (generated by GENCPM)
		DEFW 0FFFFH		; DTABCB (not used)
		DEFW 0FFFEH		; HASH (generated by GENCPM)
		DEFW 0			; HBANK (not used)

dph1:		DEFW 0			; XLT
		DEFB 0,0,0,0,0,0,0,0,0	; scratch area
		DEFB 0			; MF
		DEFW dpb_qd		; DPB
		DEFW 0FFFEH		; CSV (generated by GENCPM)
		DEFW 0FFFEH		; ALV (generated by GENCPM)
		DEFW 0FFFEH		; DIRBCB (generated by GENCPM)
		DEFW 0FFFFH		; DTABCB (not used)
		DEFW 0FFFEH		; HASH (generated by GENCPM)
		DEFW 0			; HBANK (not used)

dph2:		DEFW 0			; XLT
		DEFB 0,0,0,0,0,0,0,0,0	; scratch area
		DEFB 0			; MF
		DEFW dpb_qd		; DPB
		DEFW 0FFFEH		; CSV (generated by GENCPM)
		DEFW 0FFFEH		; ALV (generated by GENCPM)
		DEFW 0FFFEH		; DIRBCB (generated by GENCPM)
		DEFW 0FFFFH		; DTABCB (not used)
		DEFW 0FFFEH		; HASH (generated by GENCPM)
		DEFW 0			; HBANK (not used)

dph3:		DEFW 0			; XLT
		DEFB 0,0,0,0,0,0,0,0,0	; scratch area
		DEFB 0			; MF
		DEFW dpb_qd		; DPB
		DEFW 0FFFEH		; CSV (generated by GENCPM)
		DEFW 0FFFEH		; ALV (generated by GENCPM)
		DEFW 0FFFEH		; DIRBCB (generated by GENCPM)
		DEFW 0FFFFH		; DTABCB (not used)
		DEFW 0FFFEH		; HASH (generated by GENCPM)
		DEFW 0			; HBANK (not used)

dph12:		DEFW 0			; XLT
		DEFB 0,0,0,0,0,0,0,0,0	; scratch area
		DEFB 0			; MF
		DEFW dpb_ram		; DPB
		DEFW 00000H		; CSV (not used)
		DEFW 0FFFEH		; ALV (generated by GENCPM)
		DEFW 0FFFEH		; DIRBCB (generated by GENCPM)
		DEFW 0FFFFH		; DTABCB (not used)
		DEFW 0FFFEH		; HASH (generated by GENCPM)
		DEFW 0			; HBANK (not used)

dpb_dd:		DEFW 36		; SPT
		DEFB 3		; BSH
		DEFB 7		; BLM
		DEFB 0		; EXM
		DEFW 165	; DSM
		DEFW 63		; DRM
		DEFB 0C0H	; AL0
		DEFB 0		; AL1
		DEFW 16		; CKS
		DEFW 3		; OFF
		DEFB 0		; PSH
		DEFB 0		; PHM

dpb_qd:		DEFW 36		; SPT
		DEFB 4		; BSH
		DEFB 15		; BLM
		DEFB 1		; EXM
		DEFW 172	; DSM
		DEFW 127	; DRM
		DEFB 0C0H	; AL0
		DEFB 0		; AL1
		DEFW 32		; CKS
		DEFW 3		; OFF
		DEFB 0		; PSH
		DEFB 0		; PHM

dpb_sd:		DEFW 16		; SPT
		DEFB 3		; BSH
		DEFB 7		; BLM
		DEFB 0		; EXM
		DEFW 73		; DSM
		DEFW 63		; DRM
		DEFB 0C0H	; AL0
		DEFB 0		; AL1
		DEFW 16		; CKS
		DEFW 3		; OFF
		DEFB 0		; PSH
		DEFB 0		; PHM

dpb_ram:	DEFW 128	; SPT
		DEFB 3		; BSH
		DEFB 7		; BLM
		DEFB 0		; EXM
		DEFW 159	; DSM
		DEFW 63		; DRM
		DEFB 0C0H	; AL0
		DEFB 0		; AL1
		DEFW 8000H	; CKS
		DEFW 6		; OFF
		DEFB 0		; PSH
		DEFB 0		; PHM

unit:		DEFB 00100000B
track:		DEFB 2
sector:		DEFB 1
address:	DEFW 0100H

inisys_byte:	DEFB 1111000B

checksum:	DEFW 0

buffer_addr:	DEFS 2
common_buffer:	DEFS 128

saved_sp:	DEFS 2

		DEFS 64
bios_stack:

current_bank:	DEFB 1
dma_bank:	DEFB 0

reload_msg:	DEFB 13,13
		DEFM 'Insert system disc in drive A: and press <return>'
		DEFB -1

		DSEG

sign_on:	DEFB 31
		DEFM 'CP/M Plus (3.0) for RM 480Z'
		DEFB 13
		DEFM 'BIOS v 0.7 Copyright (C) 2024, Robin Sergeant'
		DEFB 13,13
		DEFM 'Silicon Disc on drive M:'
		DEFB 13,13,-1

ccp_err_msg:	DEFM 'ERROR unable to load CCP from disc'
		DEFB -1

m_label:	DEFB 32
		DEFM 'SILICONDISC'
		DEFB 1
		DEFS 19
		DEFB 0E5H	; unused status byte to init rest of directory area

xlt:		DEFB 1,4,7,10,13,16,3,6,9,12,15,2,5,8,11,14

drive_info:	DEFS 4
