; Copyright (C) 2024 Robin Sergeant
;
; non banked bios

OUTC		EQU 1
MSG		EQU 23
RDSEC		EQU 26
WRSEC		EQU 27
KBDTL		EQU 31
KBDW		EQU 33
WIDTH		EQU 52

BDOS		EQU 0005H
DRV_ALLRESET	EQU 13

CCP_LEN		EQU 25
CCP_SIZE	EQU CCP_LEN * 128

		EXTERNAL @civec,@covec,@mxtpa

		CSEG

		ORG 0

		JP boot		; initial entry on cold start
wboot_entry:	JP wboot	; reentry on program exit, warm start

		JP const	; return console input status
		JP conin	; return console input character
		JP conout	; send console output character
		JP list		; send list output character
		JP auxout	; send auxilliary output character
		JP auxin	; return auxilliary input character

		JP home		; set disks to logical home
		JP seldsk	; select disk drive, return disk parameter info
		JP settrk	; set disk track
		JP setsec	; set disk sector
		JP setdma	; set disk I/O memory address
		JP read		; read physical block(s)
		JP write	; write physical block(s)

		JP listst	; return list device status
		JP sectrn	; translate logical to physical sector

		JP conost	; return console output status
		JP auxist	; return aux input status
		JP auxost	; return aux output status
		JP devtbl	; return address of device def table
		JP cinit	; change baud rate of device

		JP getdrv	; return address of disk drive table
		JP multio	; set multiple record count for disk I/O
		JP flushdsk	; flush BIOS maintained disk caching

		JP move		; block move memory to memory
		JP time		; Signal Time and Date operation
		JP bnksel	; select bank for code execution and default DMA
		JP setbnk	; select different bank for disk I/O DMA operations.
		JP xmove	; set source and destination banks for one operation

		JP 0		; reserved for future expansion
		JP 0		; reserved for future expansion
		JP 0		; reserved for future expansion

boot:		LD SP,4000H
		CALL init_page0

		LD HL,8000H		; setup device vectors
		LD (@covec),HL
		LD (@civec),HL

		LD HL,sign_on
		EMT MSG

		CALL load_ccp
		JP Z,0100H		; start CCP if loaded ok

		LD HL,ccp_err_msg
		EMT MSG
		DI
		HALT			; nothing more we can do

wboot:		LD SP,bios_stack
		CALL init_page0

		LD A,1			; set 80 column mode in case changed
		EMT WIDTH

reload:		CALL load_ccp		; reload ccp
		JR NZ,reload_error
		LD C,DRV_ALLRESET	; reset drives before starting CCP
		CALL Z,BDOS		; (in case disc has changed)
		JP Z,0100H
reload_error:	LD HL,reload_msg
		EMT MSG
		EMT KBDW
		JR reload

init_page0:	LD A,0C3H
		LD HL,wboot_entry
		LD (0000H),A
		LD (0001H),HL

		LD HL,(@mxtpa)
		LD (0005H),A
		LD (0006H),HL
		RET

load_ccp:	LD IX,unit		; load CCP from track 1 of A:
		LD (IX+0),0
		LD (IX+1),1
		LD IY,xlt
		LD HL,0100H
		LD DE,128
		LD B,CCP_LEN

read_loop:	LD A,(IY+0)		; set next sector
		INC IY
		LD (sector),A
		LD (address),HL
		EMT RDSEC
		RET NZ
		ADD HL,DE		; advance buffer
		DJNZ read_loop

		CP A			; set zero flag for success
		RET

const:		LD (saved_sp),SP
		LD SP,bios_stack
		EMT KBDTL
		LD SP,(saved_sp)
		RET

conin:		LD (saved_sp),SP
		LD SP,bios_stack
		EMT KBDW
		LD SP,(saved_sp)
		RET

conout:		LD (saved_sp),SP
		LD SP,bios_stack
		PUSH AF
		LD A,C
		EMT OUTC
		POP AF
		LD SP,(saved_sp)
		RET

conost:		LD A,0FFH
		RET

home:		LD IX,unit
		LD (IX+1),0
		RET

seldsk:		LD (saved_sp),SP
		LD SP,bios_stack
		PUSH BC
		LD IX,unit
		LD (IX+0),C
		LD B,0			; find DPH
		SLA C			; multiply C by 2 to give table index
		LD IY,drive_table
		ADD IY,BC
		LD H,(IY+1)
		LD L,(IY+0)
		POP BC
		LD SP,(saved_sp)
		RET

settrk:		LD IX,unit
		LD (IX+1),C
		RET

setsec:		LD IX,unit
		LD (IX+2),C
		RET

setdma:		LD (address),BC
		RET

sectrn:		LD HL,xlt
		ADD HL,BC
		LD L,(HL)
		LD H,B		; B will always be zero as < 255 sectors
		RET

getdrv:		LD HL,drive_table
		RET

read:		LD (saved_sp),SP
		LD SP,bios_stack
		LD IX,unit
		EMT RDSEC
		LD A,0
		JR Z,read_ret		; return 0 for success
		INC A			; else return 1 for failure
read_ret:	LD SP,(saved_sp)
		RET

flushdsk:	XOR A
		RET

write:		LD (saved_sp),SP
		LD SP,bios_stack
		LD IX,unit
		EMT WRSEC
		LD A,0
		JR Z,write_ret		; return 0 for success
		INC A			; else return 1 for failure
write_ret:	LD SP,(saved_sp)
		RET

devtbl:		LD HL,chrtbl
		RET

move:		EX DE,HL
		LDIR
		EX DE,HL

not_supported:
list:
auxout:
auxin:
listst:
auxist:
auxost:
cinit:
multio:
time:
bnksel:
setbnk:
xmove:		RET

chrtbl:		DEFM 'TERM  '
		DEFB 00000011B
		DEFB 0
		DEFB 0

drive_table:	DEFW dph0,dph1,dph2,dph3
		DEFW 0,0,0,0,0,0,0,0,0,0,0,0

dph0:		DEFW xlt		; XLT
		DEFB 0,0,0,0,0,0,0,0,0	; scratch area
		DEFB 0			; MF
		DEFW dpb		; DPB
		DEFW 0FFFEH		; CSV (generated by GENCPM)
		DEFW 0FFFEH		; ALV (generated by GENCPM)
		DEFW 0FFFEH		; DIRBCB (generated by GENCPM)
		DEFW 0FFFFH		; DTABCB (not used)
		DEFW 0FFFEH		; HASH (generated by GENCPM)
		DEFW 0			; HBANK (not used)

dph1:		DEFW xlt		; XLT
		DEFB 0,0,0,0,0,0,0,0,0	; scratch area
		DEFB 0			; MF
		DEFW dpb		; DPB
		DEFW 0FFFEH		; CSV (generated by GENCPM)
		DEFW 0FFFEH		; ALV (generated by GENCPM)
		DEFW 0FFFEH		; DIRBCB (generated by GENCPM)
		DEFW 0FFFFH		; DTABCB (not used)
		DEFW 0FFFEH		; HASH (generated by GENCPM)
		DEFW 0			; HBANK (not used)

dph2:		DEFW xlt		; XLT
		DEFB 0,0,0,0,0,0,0,0,0	; scratch area
		DEFB 0			; MF
		DEFW dpb		; DPB
		DEFW 0FFFEH		; CSV (generated by GENCPM)
		DEFW 0FFFEH		; ALV (generated by GENCPM)
		DEFW 0FFFEH		; DIRBCB (generated by GENCPM)
		DEFW 0FFFFH		; DTABCB (not used)
		DEFW 0FFFEH		; HASH (generated by GENCPM)
		DEFW 0			; HBANK (not used)

dph3:		DEFW xlt		; XLT
		DEFB 0,0,0,0,0,0,0,0,0	; scratch area
		DEFB 0			; MF
		DEFW dpb		; DPB
		DEFW 0FFFEH		; CSV (generated by GENCPM)
		DEFW 0FFFEH		; ALV (generated by GENCPM)
		DEFW 0FFFEH		; DIRBCB (generated by GENCPM)
		DEFW 0FFFFH		; DTABCB (not used)
		DEFW 0FFFEH		; HASH (generated by GENCPM)
		DEFW 0			; HBANK (not used)

dpb:		DEFW 26		; SPT
		DEFB 3		; BSH
		DEFB 7		; BLM
		DEFB 0		; EXM
		DEFW 242	; DSM
		DEFW 63		; DRM
		DEFB 0C0H	; AL0
		DEFB 0		; AL1
		DEFW 16		; CKS
		DEFW 2		; OFF
		DEFB 0		; PSH
		DEFB 0		; PHM

unit:		DEFB 00100000B
track:		DEFB 2
sector:		DEFB 1
address:	DEFW 0100H

saved_sp:	DEFS 2

reload_msg:	DEFB 13,13
		DEFM 'Insert system disc in drive A: and press <return>'
		DEFB -1

sign_on:	DEFB 31
		DEFM 'CP/M Plus (3.0) for RM 380Z'
		DEFB 13
		DEFM 'BIOS v 0.1 Copyright (C) 2024, Robin Sergeant'
		DEFB 13,13,-1

ccp_err_msg:	DEFM 'ERROR unable to load CCP from disc'
		DEFB -1

bios_stack:

xlt:		DEFB 1,7,13,19,25
		DEFB 5,11,17,23
		DEFB 3,9,15,21
		DEFB 2,8,14,20,26
		DEFB 6,12,18,24
		DEFB 4,10,16,22
