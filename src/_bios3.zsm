; Copyright (C) 2024 Robin Sergeant
;
; non banked bios

OUTC		EQU 1
MSG		EQU 23
KBDTL		EQU 31
KBDW		EQU 33
WIDTH		EQU 52
INISYS		EQU 64
RDSECL		EQU 68
WRSECL		EQU 69
FLUSH		EQU 71
RDINFO		EQU 72

BDOS		EQU 0005H
DRV_ALLRESET	EQU 13

CCP_LEN		EQU 25
CCP_SIZE	EQU CCP_LEN * 128
PORT1_MASK	EQU 0FF01H
PORT1		EQU 019H

		EXTERNAL @civec,@covec,@mxtpa

		CSEG

		ORG 0

		JP boot		; initial entry on cold start
wboot_entry:	JP wboot	; reentry on program exit, warm start

		JP const	; return console input status
		JP conin	; return console input character
		JP conout	; send console output character
		JP list		; send list output character
		JP auxout	; send auxilliary output character
		JP auxin	; return auxilliary input character

		JP home		; set disks to logical home
		JP seldsk	; select disk drive, return disk parameter info
		JP settrk	; set disk track
		JP setsec	; set disk sector
		JP setdma	; set disk I/O memory address
		JP read		; read physical block(s)
		JP write	; write physical block(s)

		JP listst	; return list device status
		JP sectrn	; translate logical to physical sector

		JP conost	; return console output status
		JP auxist	; return aux input status
		JP auxost	; return aux output status
		JP devtbl	; return address of device def table
		JP cinit	; change baud rate of device

		JP getdrv	; return address of disk drive table
		JP multio	; set multiple record count for disk I/O
		JP flushdsk	; flush BIOS maintained disk caching

		JP move		; block move memory to memory
		JP time		; Signal Time and Date operation
		JP bnksel	; select bank for code execution and default DMA
		JP setbnk	; select different bank for disk I/O DMA operations.
		JP xmove	; set source and destination banks for one operation

		JP 0		; reserved for future expansion
		JP 0		; reserved for future expansion
		JP 0		; reserved for future expansion

boot:		LD SP,4000H
		CALL init_page0

		LD HL,8000H		; setup device vectors
		LD (@covec),HL
		LD (@civec),HL

		LD HL,sign_on
		EMT MSG

		CALL load_ccp
		LD (checksum),HL
		JP Z,0100H		; start CCP if loaded ok

		LD HL,ccp_err_msg
		EMT MSG
		DI
		HALT			; nothing more we can do

wboot:		LD SP,bios_stack
		CALL init_page0

		LD IX,inisys_byte	; re-initialize IDC buffers
		EMT INISYS

		LD A,1			; set 80 column mode in case changed
		EMT WIDTH

		LD A,0EBH		; opcode for EX DE,HL
		CALL copy_ccp		; copy CCP back to TPA

		CALL verify_cs
		JR NZ,reload		; only start CCP if checksum ok

		JP 0100H		; start CCP

reload:		CALL load_ccp		; else reload
		JR NZ,reload_error
		CALL verify_cs
		LD C,DRV_ALLRESET	; reset drives before starting CCP
		CALL Z,BDOS		; (in case disc has changed)
		JP Z,0100H
reload_error:	LD HL,reload_msg
		EMT MSG
		EMT KBDW
		LD IX,inisys_byte	; re-initialize IDC buffers
		EMT INISYS
		JR reload

init_page0:	LD A,0C3H
		LD HL,wboot_entry
		LD (0000H),A
		LD (0001H),HL

		LD HL,(@mxtpa)
		LD (0005H),A
		LD (0006H),HL
		RET

load_ccp:	LD IX,unit		; load CCP from track 2 of A:
		LD (IX+0),0
		LD (IX+1),2
		LD (IX+2),1
		LD HL,0100H
		LD (address),HL

		CALL get_discinfo	; set density for disc
		RET NZ
		LD (unit),A

		LD HL,(address)
		LD DE,128
		LD B,CCP_LEN

read_loop:	EMT RDSECL
		RET NZ
		INC (IX+2)		; increase sector no.
		ADD HL,DE		; advance buffer
		LD (address),HL
		DJNZ read_loop

		XOR A			; NOP (store CCP)
copy_ccp:	LD (copy_ccp_op),A	; set direction of copy

		LD C,PORT1		; select Page 3 (all RAM)
		LD A,(PORT1_MASK)
		OR 3
		DI			; disable interrupts while
		OUT (C),A		; ROM is unavailable

		LD HL,0			; checksum registers
		LD D,0
		EXX
		LD DE,0E800H		; copy CCP to hidden area
		LD HL,0100H		; of RAM (behind ROM) so
copy_ccp_op:	NOP
		LD BC,CCP_SIZE		; we can quickly copy it back
1$:		LD A,(HL)		; during a warm boot
		EXX
		LD E,A
		ADD HL,DE		; generate checksum
		EXX
		LDI
		JP PE,1$
		EXX
		CP A			; set zero flag for success

		LD A,(PORT1_MASK)	; return to Page 1
		OUT (C),A
		EI			; re-enable interrupts
		RET			; HL contains checksum value

verify_cs:	LD DE,(checksum)
		OR A			; reset carry flag
		SBC HL,DE
		RET

const:		LD (saved_sp),SP
		LD SP,bios_stack
		EMT KBDTL
		LD SP,(saved_sp)
		RET

conin:		LD (saved_sp),SP
		LD SP,bios_stack
		EMT KBDW
		LD SP,(saved_sp)
		RET

conout:		LD (saved_sp),SP
		LD SP,bios_stack
		PUSH AF
		LD A,C
		EMT OUTC
		POP AF
		LD SP,(saved_sp)
		RET

conost:		LD A,0FFH
		RET

home:		LD IX,unit
		LD (IX+1),0
		RET

seldsk:		LD (saved_sp),SP
		LD SP,bios_stack
		PUSH AF
		PUSH BC
		LD B,0			; find DPH
		SLA C			; multiply C by 2 to give table index
		LD IY,drive_table
		ADD IY,BC
		LD H,(IY+1)
		LD L,(IY+0)
		PUSH HL
		POP IY			; IY now contains address of DPH
		SRL C
		LD HL,drive_info
		ADD HL,BC		; HL contains location for stored unit byte
		BIT 0,E
		JR Z,read_info		; Read disc info when bit 0 unset
		POP BC
		LD A,(HL)		; else reuse data previously found for drive
		JR set_unit
read_info:	LD IX,unit
		LD (IX+0),C
		CALL get_discinfo
		POP BC
		JR Z,rdinfo_ok
		LD HL,0			; return null DPH on error
		JR seldsk_ret
rdinfo_ok:	OR C			; add drive number to unit
		LD (HL),A		; store in drive info table
		LD HL,dpb_sd
		BIT 5,A
		JR Z,set_dpd		; use SD when bit 5 clear
		LD HL,dpb_dd
		BIT 6,A
		JR Z,set_dpd		; use DD when bit 6 clear
		LD HL,dpb_qd		; else use QD
set_dpd:	LD (IY+12),L
		LD (IY+13),H
set_unit:	LD (unit),A
		PUSH IY			; transfer DPH to HL
		POP HL
seldsk_ret:	POP AF
		LD SP,(saved_sp)
		RET

get_discinfo:	EMT RDINFO
		RET NZ			; exit on error
		AND 00000110B		; keep data and track density
		RLCA			; shift to bits 5 and 6 to
		RLCA			; form drive unit byte
		RLCA
		RLCA
		CP A			; set zero flag (success)
		RET

settrk:		LD IX,unit
		LD (IX+1),C
		RET

setsec:		LD IX,unit
		LD (IX+2),C
		RET

setdma:		LD (address),BC
		RET

sectrn:		LD HL,unit
		BIT 5,(HL)
		JR Z,translate		; translate for SD only
		LD H,B
		LD L,C
		INC L			; otherwise just adjust to start from 1
		RET
translate:	LD HL,xlt
		ADD HL,BC
		LD L,(HL)
		LD H,B			; B will always be zero as < 255 sectors
		RET

getdrv:		LD HL,drive_table
		RET

read:		LD (saved_sp),SP
		LD SP,bios_stack
		LD IX,unit
		EMT RDSECL
		LD A,0
		JR Z,read_ret		; return 0 for success
		CALL get_discinfo
		JR NZ,read_fail
		PUSH HL
		LD HL,unit
		XOR (HL)		; xor to see if density has changed
		POP HL
		AND 11111000B		; (ignoring drive number)
		LD A,0FFH
		JR NZ,read_ret		; return FF when media changed
read_fail:	LD A,1			; else return 1 for failure
read_ret:	LD SP,(saved_sp)
		RET

flushdsk:	LD (saved_sp),SP
		LD SP,bios_stack
		LD IX,unit
do_flush:	EMT FLUSH
		JR Z,flush_ok
		BIT 6,A
		LD A,1			; return 1 for general failure
		JR Z,flush_ret		; (write protect bit not set)
		JR C,flush_ret		; (IDC protocol error)
		INC A
		JR flush_ret		; return 2 if disc write protected
flush_ok:	XOR A
flush_ret:	LD SP,(saved_sp)
		RET			; return 0 on sucess

write:		LD (saved_sp),SP
		LD SP,bios_stack
		LD IX,unit
		EMT WRSECL
		JR Z,write_ok
		JR C,write_fail		; (IDC protocol error)
		BIT 6,A
		JR NZ,write_protect	; (write protect bit set)
		CALL get_discinfo
		JR NZ,write_fail
		PUSH HL
		LD HL,unit
		XOR (HL)		; xor to see if density has changed
		POP HL
		AND 11111000B		; (ignoring drive number)
		LD A,0FFH		; return FF when media changed
		JR NZ,write_ret
write_fail:	LD A,1			; return 1 for general failure
		JR write_ret
write_protect:	LD A,2			; return 2 if disc write protected
		JR write_ret
write_ok:	LD A,(track)
		CP 3			; always flush after directory track update
		JR Z,do_flush		; (hack to prevent data loss)
		XOR A
write_ret:	LD SP,(saved_sp)
		RET			; return 0 on sucess

devtbl:		LD HL,chrtbl
		RET

move:		EX DE,HL
		LDIR
		EX DE,HL

not_supported:
list:
auxout:
auxin:
listst:
auxist:
auxost:
cinit:
multio:
time:
bnksel:
setbnk:
xmove:		RET

chrtbl:		DEFM 'TERM  '
		DEFB 00000011B
		DEFB 0
		DEFB 0

drive_table:	DEFW dph0,dph1,dph2,dph3
		DEFW 0,0,0,0,0,0,0,0,0,0,0,0

dph0:		DEFW 0			; XLT
		DEFB 0,0,0,0,0,0,0,0,0	; scratch area
		DEFB 0			; MF
		DEFW dpb_qd		; DPB
		DEFW 0FFFEH		; CSV (generated by GENCPM)
		DEFW 0FFFEH		; ALV (generated by GENCPM)
		DEFW 0FFFEH		; DIRBCB (generated by GENCPM)
		DEFW 0FFFFH		; DTABCB (not used)
		DEFW 0FFFEH		; HASH (generated by GENCPM)
		DEFW 0			; HBANK (not used)

dph1:		DEFW 0			; XLT
		DEFB 0,0,0,0,0,0,0,0,0	; scratch area
		DEFB 0			; MF
		DEFW dpb_qd		; DPB
		DEFW 0FFFEH		; CSV (generated by GENCPM)
		DEFW 0FFFEH		; ALV (generated by GENCPM)
		DEFW 0FFFEH		; DIRBCB (generated by GENCPM)
		DEFW 0FFFFH		; DTABCB (not used)
		DEFW 0FFFEH		; HASH (generated by GENCPM)
		DEFW 0			; HBANK (not used)

dph2:		DEFW 0			; XLT
		DEFB 0,0,0,0,0,0,0,0,0	; scratch area
		DEFB 0			; MF
		DEFW dpb_qd		; DPB
		DEFW 0FFFEH		; CSV (generated by GENCPM)
		DEFW 0FFFEH		; ALV (generated by GENCPM)
		DEFW 0FFFEH		; DIRBCB (generated by GENCPM)
		DEFW 0FFFFH		; DTABCB (not used)
		DEFW 0FFFEH		; HASH (generated by GENCPM)
		DEFW 0			; HBANK (not used)

dph3:		DEFW 0			; XLT
		DEFB 0,0,0,0,0,0,0,0,0	; scratch area
		DEFB 0			; MF
		DEFW dpb_qd		; DPB
		DEFW 0FFFEH		; CSV (generated by GENCPM)
		DEFW 0FFFEH		; ALV (generated by GENCPM)
		DEFW 0FFFEH		; DIRBCB (generated by GENCPM)
		DEFW 0FFFFH		; DTABCB (not used)
		DEFW 0FFFEH		; HASH (generated by GENCPM)
		DEFW 0			; HBANK (not used)

dpb_dd:		DEFW 36		; SPT
		DEFB 3		; BSH
		DEFB 7		; BLM
		DEFB 0		; EXM
		DEFW 165	; DSM
		DEFW 63		; DRM
		DEFB 0C0H	; AL0
		DEFB 0		; AL1
		DEFW 16		; CKS
		DEFW 3		; OFF
		DEFB 0		; PSH
		DEFB 0		; PHM

dpb_qd:		DEFW 36		; SPT
		DEFB 4		; BSH
		DEFB 15		; BLM
		DEFB 1		; EXM
		DEFW 172	; DSM
		DEFW 127	; DRM
		DEFB 0C0H	; AL0
		DEFB 0		; AL1
		DEFW 32		; CKS
		DEFW 3		; OFF
		DEFB 0		; PSH
		DEFB 0		; PHM

dpb_sd:		DEFW 16		; SPT
		DEFB 3		; BSH
		DEFB 7		; BLM
		DEFB 0		; EXM
		DEFW 73		; DSM
		DEFW 63		; DRM
		DEFB 0C0H	; AL0
		DEFB 0		; AL1
		DEFW 16		; CKS
		DEFW 3		; OFF
		DEFB 0		; PSH
		DEFB 0		; PHM

unit:		DEFB 00100000B
track:		DEFB 2
sector:		DEFB 1
address:	DEFW 0100H

inisys_byte:	DEFB 11111000B

checksum:	DEFW 0

saved_sp:	DEFS 2

reload_msg:	DEFB 13,13
		DEFM 'Insert system disc in drive A: and press <return>'
		DEFB -1

sign_on:	DEFB 31
		DEFM 'CP/M Plus (3.0) for RM 480Z'
		DEFB 13
		DEFM 'BIOS v 0.8 Copyright (C) 2024, Robin Sergeant'
		DEFB 13,13,-1

ccp_err_msg:	DEFM 'ERROR unable to load CCP from disc'
		DEFB -1

bios_stack:

xlt:		DEFB 1,4,7,10,13,16,3,6,9,12,15,2,5,8,11,14

drive_info:	DEFS 4
